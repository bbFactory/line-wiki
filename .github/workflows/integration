name: 🔄 Integration

on:
  pull_request:

jobs:
  line-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get list of changed files
        id: changed-files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | jq -R -s -c 'split("\n")[:-1]')
          echo "changed_files: $changed_files"
          echo "files=$changed_files" >> $GITHUB_OUTPUT

      - name: Check for missing newlines
        id: newline-check
        run: |
          files_without_newline=()
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              last_char=$(tail -c 1 "$file")
              if [ -n "$last_char" ]; then
                files_without_newline+=("$file")
              fi
            fi
          done < <(echo '${{ steps.changed-files.outputs.files }}' | jq -r '.[]')

          if [ ${#files_without_newline[@]} -gt 0 ]; then
            json_files=$(printf '%s\n' "${files_without_newline[@]}" | jq -R -s -c 'split("\n")[:-1]')
            echo "files_without_newline: $json_files"
            echo "files=$json_files" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Set Job Summary
        if: failure()
        run: |
          if [ -n '${{ steps.newline-check.outputs.files }}' ]; then
          echo "🛠️ 아래 파일들에 공백 줄을 추가해주세요:" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.newline-check.outputs.files }}' |
            jq -r '.[]' |
            sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          fi

  label-lang:
    runs-on: ubuntu-latest
    continue-on-error: true

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create package.json
        run: echo '{}' > package.json

      - name: Install dependencies
        run: npm install @octokit/rest node-fetch

      - name: Detect languages and add labels
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_NUM: ${{ github.event.number }}
        run: |
          node --input-type=module -e "
          import { Octokit } from '@octokit/rest';
          import path from 'path';
          import fetch from 'node-fetch';

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN,
            request: { fetch }
          });

          const extensionsToLanguages = {
            js: 'js',
            ts: 'ts',
            py: 'py',
            java: 'java',
            kt: 'kotlin',
            cpp: 'c++',
            go: 'go',
            exs: 'elixir',
            swift: 'swift'
            // 필요한 다른 확장자와 언어 매핑 추가
          };

          async function run() {
            const { data: files } = await octokit.pulls.listFiles({
              owner: process.env.GITHUB_REPOSITORY.split('/')[0],
              repo: process.env.GITHUB_REPOSITORY.split('/')[1],
              pull_number: process.env.PR_NUM,
            });

            const languages = new Set();
            files.forEach(file => {
              const ext = path.extname(file.filename).slice(1);
              if (extensionsToLanguages[ext]) {
                languages.add(extensionsToLanguages[ext]);
              }
            });

            if (languages.size > 0) {
              await octokit.issues.addLabels({
                owner: process.env.GITHUB_REPOSITORY.split('/')[0],
                repo: process.env.GITHUB_REPOSITORY.split('/')[1],
                issue_number: process.env.PR_NUM,
                labels: Array.from(languages),
              });
            }
          }

          run();
          "
